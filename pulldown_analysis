library(igraph)
library(tidyverse)
library(matrixStats)
library(stringr)
library(dplyr)

setwd("~/path/")
pulldown_data_psms <- as.data.frame(read.delim(file = "path/Pulldown/target_psmtable.txt"))
graphs_comms <- readRDS("data/graphs_comms.RDS")
hits_everything <- readRDS("output/hits_everything.RDS")
#just significant
hits_everything <- hits_everything[hits_everything$pAdj < 0.05,]

# peptide_seq_list <- readRDS("path/peptide_seq_list.RDS")


get_pulldown_and_annotate <- function(pulldown_data_psms, graphs_comms, ioi){peptide_seq_list <- list()


peptide_seq_list[[ioi]] <- data.frame(
  
  as.data.frame(vertex_attr(graphs_comms[[ioi]])[["name"]]),
  # as.data.frame(gsub("[0-9\\.\\+]", "",
  #                    vertex_attr(graphs_comms[[i]])[["name"]])),
  
  as.data.frame(vertex_attr(graphs_comms[[ioi]])[["membership"]]))
colnames(peptide_seq_list[[ioi]]) <- c("peptides", #"peptides_full", 
                                     "membership" )


transform_data <- function(data) {
  # Replace letters preceeding +15.995 with lowercase letters
  data <- gsub("(\\w)\\+15\\.995", "\\L\\1", data, perl = TRUE)

  # Replace letters preceeding +57.021 with lowercase letters
  data <- gsub("(\\w)\\+57\\.021", "\\L\\1", data, perl = TRUE)

  # Remove all other +numbers
  data <- gsub("\\+\\d+\\.\\d+", "", data)

  return(data)
}

#transform peptides
peptide_seq_list[[ioi]]$peptides <- transform_data(data = peptide_seq_list[[ioi]]$peptides)
pulldown_data_psms$Peptide <- transform_data(data = pulldown_data_psms$Peptide)
#filter PSM file by ioi
pulldown_data_psms_filt <- pulldown_data_psms[pulldown_data_psms$Peptide %in% peptide_seq_list[[ioi]]$peptides,]

#label sample source
pulldown_data_psms_filt$type <- grepl("DMSO", pulldown_data_psms_filt$SpectraFile)

pulldown_data_psms_filt$type <- gsub("TRUE", "DMSO", pulldown_data_psms_filt$type)
pulldown_data_psms_filt$type <- gsub("FALSE", "IBRUTINIB", pulldown_data_psms_filt$type)

pulldown_data_psms_filt$membership <- 0

for(i in pulldown_data_psms_filt$Peptide){
  
  pulldown_data_psms_filt[pulldown_data_psms_filt$Peptide == i,]$membership <- 
    peptide_seq_list[[ioi]][peptide_seq_list[[ioi]]$peptides == i,]$membership
  
}

return(pulldown_data_psms_filt)

}

pulldown_data_psms_filt <- get_pulldown_and_annotate(pulldown_data_psms, graphs_comms, ioi = "BLK")
pulldown_data_psms_filt <- get_pulldown_and_annotate(pulldown_data_psms, graphs_comms, ioi = "WASHC2C")

memberships_represented <- unique(pulldown_data_psms_filt$membership)

#annotate the hits table
hits_from_pulldown <- data.frame("id" = hits_everything$id, "gene symbol" = hits_everything$hgnc_symbol,
                                 "test" = hits_everything$type, "pAdj" = hits_everything$pAdj)

hits_from_pulldown$proteoform_ibrutinib_pulldown <- "N.D."
hits_from_pulldown$proteoform_DMSO_pulldown <- "N.D."
hits_from_pulldown$gene_ibrutinib_pulldown <- "N.D."
hits_from_pulldown$gene_DMSO_pulldown <- "N.D."
hits_from_pulldown <- hits_from_pulldown[!is.na(hits_from_pulldown$id),]

# Filter out NAs in hits_from_pulldown$id
hits_from_pulldown <- hits_from_pulldown[!is.na(hits_from_pulldown$id),]

for (i in unique(hits_from_pulldown$gene.symbol)) {
  pulldown_data_psms_filt <- tryCatch(
    {get_pulldown_and_annotate(pulldown_data_psms, graphs_comms, ioi = i)},
    error = function(e) { return(data.frame()) }  # Return an empty data frame on error
  )
  
  if (nrow(pulldown_data_psms_filt) > 0) {
    for (j in unique(pulldown_data_psms_filt$membership)) {
      subset_id <- paste0(i, "_", j)
      subset_condition <- hits_from_pulldown$id == subset_id
      
      if (sum(subset_condition) > 0) {
        subset_row <- which(subset_condition)
        
        hits_from_pulldown$proteoform_DMSO_pulldown[subset_row] <- sum(
          pulldown_data_psms_filt[pulldown_data_psms_filt$type == "DMSO" & 
                                    subset_id %in% hits_from_pulldown$id,]$Intensity,
          na.rm = TRUE
        )
        
        hits_from_pulldown$proteoform_ibrutinib_pulldown[subset_row] <- sum(
          pulldown_data_psms_filt[pulldown_data_psms_filt$type == "IBRUTINIB" & 
                                    subset_id %in% hits_from_pulldown$id,]$Intensity,
          na.rm = TRUE
        )
        
        # Similarly update gene_DMSO_pulldown and gene_ibrutinib_pulldown
        gene_symbol_pulldown <- unique(pulldown_data_psms_filt$Master.protein.s.)
        full_data_subset <- pulldown_data_psms$Master.protein.s. %in% gene_symbol_pulldown 
        
        if(nrow(pulldown_data_psms[full_data_subset,]) > 0){
          
          hits_from_pulldown$gene_DMSO_pulldown[subset_row] <- sum(pulldown_data_psms[grepl("DMSO", pulldown_data_psms$SpectraFile) &
                                                                                        pulldown_data_psms$Master.protein.s. %in% gene_symbol_pulldown,]$Intensity,
                                                                   na.rm = TRUE)
          
          hits_from_pulldown$gene_ibrutinib_pulldown[subset_row] <- sum(pulldown_data_psms[!grepl("DMSO", pulldown_data_psms$SpectraFile) &
                                                                                        pulldown_data_psms$Master.protein.s. %in% gene_symbol_pulldown,]$Intensity,
                                                                   na.rm = TRUE)
          
        }
      }
    }
  }
  

}


openxlsx::write.xlsx(hits_from_pulldown, "output/pulldown_result_table_intensity.xlsx")

#redo for everything

#are any gene symbols missing from main dataset? add them
hits_everything <- readRDS("output/hits_everything.RDS")
# library(biomaRt)
# mart <- useEnsembl(dataset = "hsapiens_gene_ensembl", biomart='ensembl')
# 
# pulldown_ids <- getBM(attributes = c("uniprot_gn_id",#"pdb",
#                                     #"uniprot_gn_symbol",
#                                     "hgnc_symbol"
# ),
# values = pulldown_data_psms$Protein.Group.Accessions,
# mart = mart)
# pulldown_ids <- pulldown_ids[!is.null(pulldown_ids$uniprot_gn_id) & !is.null(pulldown_ids$hgnc_symbol),]
pulldown_ids_hngc <- unique(pulldown_data_psms$Gene.Name[pulldown_data_psms$Gene.Name %!in% hits_everything$hgnc_symbol])
# 
# 

all_from_pulldown <- data.frame("id" = hits_everything$id, "gene symbol" = hits_everything$hgnc_symbol,
                            "test" = hits_everything$type, "pAdj" = hits_everything$pAdj)

pulldown_ids_hngc <- data.frame("id" = "N.D.", "gene symbol" = pulldown_data_psms$Gene.Name,
                                "test" = "pulldown only", "pAdj" = "N.D.")
all_from_pulldown <- rbind(all_from_pulldown, pulldown_ids_hngc)

merge_columns <- unique(pulldown_data_psms$SpectraFile)

for (new_col_name in merge_columns) {
  all_from_pulldown[[new_col_name]] <- "N.D"
}



all_from_pulldown$proteoform_ibrutinib_pulldown <- "N.D."
all_from_pulldown$proteoform_DMSO_pulldown <- "N.D."
all_from_pulldown$gene_ibrutinib_pulldown <- "N.D."
all_from_pulldown$gene_DMSO_pulldown <- "N.D."
all_from_pulldown$peptides_proteoform <- "N.D."
all_from_pulldown$peptides_gene_symbol <- "N.D."
all_from_pulldown <-all_from_pulldown[!is.na(all_from_pulldown$id),]

for (i in unique(all_from_pulldown$gene.symbol)) {
  pulldown_data_psms_filt <- tryCatch(
    {get_pulldown_and_annotate(pulldown_data_psms, graphs_comms, ioi = i)},
    error = function(e) { return(data.frame()) }  # Return an empty data frame on error
  )
  
  if (nrow(pulldown_data_psms_filt) > 0) {
    for (j in unique(pulldown_data_psms_filt$membership)) {
      subset_id <- paste0(i, "_", j)
      subset_condition <- all_from_pulldown$id == subset_id
      
      if (sum(subset_condition) > 0) {
        subset_row <- which(subset_condition)
        
        all_from_pulldown$proteoform_DMSO_pulldown[subset_row] <- sum(
          pulldown_data_psms_filt[pulldown_data_psms_filt$type == "DMSO" & 
                                    subset_id == paste0(pulldown_data_psms_filt$Gene.Name, "_", pulldown_data_psms_filt$membership) ,]$`MS1.area`,
          na.rm = TRUE
        )
        
        all_from_pulldown$proteoform_ibrutinib_pulldown[subset_row] <- sum(
          pulldown_data_psms_filt[pulldown_data_psms_filt$type == "IBRUTINIB" & 
                                    subset_id== paste0(pulldown_data_psms_filt$Gene.Name, "_", pulldown_data_psms_filt$membership),]$`MS1.area`,
          na.rm = TRUE
        )
        for(k in unique(pulldown_data_psms_filt$SpectraFile)){
          
          all_from_pulldown[[k]][subset_row] <- sum(
            pulldown_data_psms_filt[pulldown_data_psms_filt$SpectraFile == k & 
                                      subset_id == paste0(pulldown_data_psms_filt$Gene.Name, "_", pulldown_data_psms_filt$membership),]$`MS1.area`,
            na.rm = TRUE
          )
          
        }
        
        # Similarly update gene_DMSO_pulldown and gene_ibrutinib_pulldown
        gene_symbol_pulldown <- unique(pulldown_data_psms_filt$Protein.Group.Accessions)
        full_data_subset <- pulldown_data_psms$Protein.Group.Accessions %in% gene_symbol_pulldown 
        
        if(nrow(pulldown_data_psms[full_data_subset,]) > 0){
          
          all_from_pulldown$gene_DMSO_pulldown[subset_row] <- sum(pulldown_data_psms[grepl("DMSO", pulldown_data_psms$Spectrum.File) &
                                                                                          pulldown_data_psms$Protein.Group.Accessions %in% gene_symbol_pulldown,]$`MS1.area`,
                                                                   na.rm = TRUE)
          
          all_from_pulldown$gene_ibrutinib_pulldown[subset_row] <- sum(pulldown_data_psms[!grepl("DMSO", pulldown_data_psms$Spectrum.File) &
                                                                                             pulldown_data_psms$Protein.Group.Accessions %in% gene_symbol_pulldown,]$`MS1.area`,
                                                                        na.rm = TRUE)
          
        }
      }
    }
  }
  
  
}

saveRDS(all_from_pulldown, "data/all_from_pulldown_raw.RDS")
all_from_pulldown <- readRDS("data/all_from_pulldown_raw.RDS")


#center the matrix
# #scale each proteoform to be centered at zero within the meltome cell line data subset
# exprs(proteoform_abundance) <- log2(exprs(proteoform_abundance))
all_from_pulldown_mat <- all_from_pulldown[,c("id",merge_columns)]
all_from_pulldown_mat <- unique(all_from_pulldown_mat)
#all_from_pulldown_mat[,merge_columns] <- log2(data.matrix(all_from_pulldown_mat[,merge_columns]))

#NormFactors <- rowMedians(data.matrix(all_from_pulldown_mat[,merge_columns]), na.rm = TRUE)

#all_from_pulldown_mat[,merge_columns] <- t(scale(t(all_from_pulldown_mat[,merge_columns]), center = NormFactors, scale = FALSE))
colnames(all_from_pulldown_mat) <- gsub("20171124_JERF_", "", colnames(all_from_pulldown_mat))
colnames(all_from_pulldown_mat) <- gsub(".raw", "", colnames(all_from_pulldown_mat))

df_long <- all_from_pulldown_mat  %>%
     pivot_longer(cols = colnames(all_from_pulldown_mat)[2:13], names_to = "Label", values_to = "Value")
df_long$type <- grepl("PROBE", df_long$Label)
df_long$type <- gsub("TRUE", "IBRUTINIB", df_long$type)
df_long$type <- gsub("FALSE", "DMSO", df_long$type)
df_long$dose <- grepl("11|12|13", df_long$Label)
df_long$dose <- gsub("TRUE", "100nM", df_long$dose)
df_long$dose <- gsub("FALSE", "20uM", df_long$dose)
df_long$p_val <- 1
df_long$Value[df_long$Value == "0" ] <- NA
df_long$Value_Old <- as.numeric(df_long$Value )
df_long$Value_Plot <- as.numeric(df_long$Value )
df_long$Value <- as.numeric(df_long$Value )



#perform t tests

for(i in unique(df_long$id)){

  for(j in unique(df_long$dose)){
    #More than 2 reps for each treatment
    if(sum(is.na(df_long[df_long$id == i &
                         df_long$dose == j &
                         df_long$type == "IBRUTINIB",]$Value)) < 2 &
       sum(is.na(df_long[df_long$id == i &
                         df_long$dose == j &
                         df_long$type == "DMSO",]$Value)) < 2 ){
    df_long[df_long$id == i & df_long$dose == j,]["p_val"] <- t.test(x = df_long[df_long$id == i &
                                                                                df_long$dose == j &
                                                                                df_long$type == "IBRUTINIB",]$Value,
                                                                  y =  df_long[df_long$id == i &
                                                                                 df_long$dose == j &
                                                                                 df_long$type == "DMSO",]$Value,
                                                                  paired = FALSE)$p.value

    df_long[df_long$id == i & df_long$dose == j & df_long$type == "DMSO",]["Value_Plot"] <- mean(as.numeric(df_long[df_long$id == i &
                                                                                                   df_long$dose == j &
                                                                                                   df_long$type == "DMSO",]$Value), na.rm = TRUE)
    df_long[df_long$id == i & df_long$dose == j & df_long$type == "IBRUTINIB",]["Value_Plot"] <- mean(as.numeric(df_long[df_long$id == i &
                                                                                                           df_long$dose == j &
                                                                                                           df_long$type == "IBRUTINIB",]$Value), na.rm = TRUE)

    }
    #Only DMSO, 1 or 0 ibrutinib reps
    if(sum(is.na(df_long[df_long$id == i &
                         df_long$dose == j &
                         df_long$type == "IBRUTINIB",]$Value)) >= 2 &
       sum(is.na(df_long[df_long$id == i &
                         df_long$dose == j &
                         df_long$type == "DMSO",]$Value)) < 2 ){

      df_long[df_long$id == i & df_long$dose == j & df_long$type == "DMSO",]["Value_Plot"] <- mean(as.numeric(df_long[df_long$id == i &
                                                                                                     df_long$dose == j &
                                                                                                     df_long$type == "DMSO",]$Value), na.rm = TRUE)

    }
    #Only ibrutinib, 1 or 0 DMSO reps
    if(sum(is.na(df_long[df_long$id == i &
                         df_long$dose == j &
                         df_long$type == "IBRUTINIB",]$Value)) < 2 &
       sum(is.na(df_long[df_long$id == i &
                         df_long$dose == j &
                         df_long$type == "DMSO",]$Value)) >= 2 ){

      df_long[df_long$id == i & df_long$dose == j & df_long$type == "IBRUTINIB",]["Value_Plot"] <- mean(as.numeric(df_long[df_long$id == i &
                                                                                                          df_long$dose == j &
                                                                                                          df_long$type == "IBRUTINIB",]$Value), na.rm = TRUE)
      #set p value flag - small value for filtering
      df_long[df_long$id == i & df_long$dose == j & df_long$type == "IBRUTINIB",]["p_val"] <- 1*10^-10

    }

  }

}

# saveRDS(df_long, "output/df_long.RDS")
df_long <- readRDS( "output/df_long.RDS")

df_long_merge <- left_join(df_long, y = hits_everything[hits_everything$type == "RCH-ACV", ], by = c("id"))
#df_long_merge <- df_long_merge[!is.na(df_long_merge$Value), ]
#add rep column 
df_long_merge <- df_long_merge %>%
  mutate(replicate = as.numeric(str_extract(Label, "(?<=\\D)(\\d+)(?=\\.mzML)")))

df_long_merge <- full_join(df_long_merge[df_long_merge$type.x == "IBRUTINIB",], df_long_merge[df_long_merge$type.x == "DMSO",], 
                           by = c("id", "dose", "replicate"), relationship = "many-to-many")

df_long_merge[is.na(df_long_merge$Value_Plot.y),]$Value_Plot.y <- 0
df_long_merge[is.na(df_long_merge$Value_Plot.x),]$Value_Plot.x <- 0
df_long_merge <- df_long_merge[rowSums(df_long_merge[,c("Value_Plot.x", "Value_Plot.y")]) != 0,]
pdf(file = "output/rawdata_proteoformmatches_pulldown.pdf", width = 10, height = 5)

ggplot(df_long_merge , aes( x = log2(Value_Plot.x + 1), y = log2(Value_Plot.y +1) )) +geom_point(aes(color = pAdj.x < 0.05, size = -log10(pAdj.x))) +
  ylab("Pulldown intensity DMSO") + xlab("Pulldown intensity ibrutinib") + ggpubr::theme_pubr()
dev.off()

pdf(file = "output/rawdata_proteoformmatches_pulldown_BTKWASHC2Clabel.pdf", width = 5, height = 5.2)

ggplot(df_long_merge , aes( x = log2(as.numeric(Value_Plot.x) + 1), y = log2(Value_Plot.y +1) )) +geom_point(aes( size = -log10(pAdj.x)), color = "grey70") +
  geom_point(data = df_long_merge[df_long_merge$id %in% c("BTK_1", "BTK_2"),],  aes(x = log2(as.numeric(Value_Plot.x) + 1), y = log2(as.numeric(Value_Plot.y) +1), size = -log10(pAdj.x)), color = "deepskyblue3") +
  geom_point(data = df_long_merge[df_long_merge$id %in% c("WASHC2C_1"),],  aes(x = log2(Value_Plot.x + 1), y = log2(Value_Plot.y +1), size = -log10(pAdj.x)), color = "#873F56") +
  xlab("Pulldown intensity ibrutinib") + ylab("Pulldown intensity DMSO") + ggpubr::theme_pubr()
dev.off()

library(ggplot2)
library(ggrepel)
library(ggpubr)

#Function to create the plot

df_long_merge_big <- df_long_merge
df_long_merge <- unique(df_long_merge)
pdf(file = "output/rawdata_proteoformmatches_pulldown_BTKWASHC2Clabel.pdf", width = 6, height = 6)


ggplot(df_long_merge , aes( x = log2(as.numeric(Value_Plot.x) + 1), y = log2(Value_Plot.y +1) )) + 
  geom_point(aes(size = -log10(pAdj.x), alpha = 0.3), color = "grey70") +
  geom_point(data = df_long_merge[df_long_merge$id %in% c("BTK_1", "BTK_2"),],  
             aes(x = log2(as.numeric(Value_Plot.x) + 1), y = log2(as.numeric(Value_Plot.y) +1), size = -log10(pAdj.x)), 
             color = "deepskyblue3", alpha = 0.85) +
  geom_point(data = df_long_merge[df_long_merge$id %in% c("WASHC2C_1"),],  
             aes(x = log2(Value_Plot.x + 1), y = log2(Value_Plot.y +1), size = -log10(pAdj.x)), 
             color = "#873F56", alpha = 0.85) +
  geom_text_repel(data = df_long_merge[df_long_merge$id %in% c("BTK_1", "BTK_2", "WASHC2C_1"),], 
            aes(label = id), vjust = 1.5, hjust = 1.5, nudge_x = 0.5, nudge_y = 0.5, max.overlaps = 60) + 
  xlab("Pulldown intensity ibrutinib") + 
  ylab("Pulldown intensity DMSO") + 
  theme_minimal() +
  theme(legend.position = "none") +
  guides(alpha = "none") + 
  ggpubr::theme_pubr()



dev.off()

openxlsx::write.xlsx(df_long_merge, "output/SupplementaryTable5.xlsx")


color_palette_unconventional <- c(
  "PHYKPL_1"="#FF9AA2",  #Pastel Red
  # Soft Coral
  #
  #"#E2F0CB",  # Pastel Green
 "WASHC2C_1"= "#C79EFA",  #Pastel Lavender
 "BRAF_1"="#FFDAC1",
  #
 #"WNK1_2" = "#A6FFA1",
 "LYN_2"= "#66B2B2",  #Saturated Peach
 # 
  "BTK_1"="gold",
 "BTK_2"="gold",
 "FYN_1"=  "#B5EAD7", 
 #"GSK3B_1" = "#E2F0CB",
 "ITGB1BP1_1"="#AFCBFF"#,  #Pastel Blue
  #"BTK_2"="gold"
)

create_highlighted_plot <- function(df, highlight_info, base_size = 5, text_size = 3.5, alpha_level = 0.5, jitter_width = 0.2, jitter_height = 0.2) {
  # Extract IDs and Colors from the highlight_info
  highlighted_ids <- names(highlight_info)
  colors <- unname(highlight_info)
  
  # Default color for non-highlighted points
  default_color <- "grey80"
  
  # Create the base plot
  p <- ggplot(df, aes(x = log2(as.numeric(Value_Plot.x) + 1), y = log2(Value_Plot.y + 1))) +
    geom_point(data = subset(df, !(id %in% highlighted_ids)), aes(size = -log10(pAdj.x), color = default_color), alpha = alpha_level, width = jitter_width, height = jitter_height) +
    geom_point(data = subset(df, id %in% highlighted_ids), aes(size = -log10(pAdj.x), color = as.character(id)), alpha = max(alpha_level*2, 1)) +
    scale_color_manual(values = c(highlight_info, default = default_color)) +
    xlab("Pulldown intensity ibrutinib") + 
    ylab("Pulldown intensity DMSO") + 
    theme_pubr(base_family = "Helvetica") +
    guides(color = "none", size = guide_legend(title = "Log10 p-Value"))
  

  
  # representative_points <- df %>%
  #   group_by(id) %>% 
  #   filter(row_number() %in% 1) %>%  # keep the first 
  #   ungroup()
  representative_points <- df %>%
    group_by(id) %>% 
    slice(which.max(Value_Plot.x)) %>%
    ungroup()
  
  highlighted_representatives <- representative_points %>%
    filter(id %in% highlighted_ids)
  
  # Adding labels for a representative point of each highlighted ID
  p <- p + geom_label_repel(force_pull = .5, point.padding = 0,
    data = highlighted_representatives,
    aes(label = id), 
    size = text_size,
    box.padding = unit(2, "lines")
  )
  
  return(p)
}
pdf(file = "output/rawdata_proteoformmatches_pulldown_BTKWASHC2Clabel.pdf", width = 6, height = 6)
create_highlighted_plot(df_long_merge, alpha_level = .4, 
                        color_palette_unconventional)
dev.off()


  ggplot(df_long_merge , aes( x = log2(Value_Plot.x + 1), y = log2(Value_Plot.y +1) )) +geom_point(aes( size = -log10(pAdj.x))) +
    geom_point(data = df_long_merge[df_long_merge$id %in% c("MAP2K7_0"),],  aes(x = log2(Value_Plot.x + 1), y = log2(Value_Plot.y +1), size = -log10(pAdj.x)), color = "blue") + 
  ylab("Pulldown intensity ibrutinib") + xlab("Pulldown intensity DMSO") + ggpubr::theme_pubr()
  
 unique( df_long_merge[df_long_merge$Value_Plot.x != 0 & df_long_merge$Value_Plot.y == 0& df_long_merge$pVal.x < 0.05,]$id)

 openxlsx::write.xlsx( df_long_merge[df_long_merge$Value_Plot.x != 0 & df_long_merge$Value_Plot.y == 0& df_long_merge$pVal.x < 0.05,], "output/pulldown_hits_everything.xlsx")
 
 library(ggvenn)
 
 targets_listed <- list(#"TPP hits" = unique(proteoformtppdata[proteoformtppdata$pVal < .01,]$ioi),
   "RCH-ACV TPP hits" = unique(df_long_merge[df_long_merge$pVal.x < 0.01,]$id),
   "RCH-ACV pulldown hits" = unique(df_long_merge[df_long_merge$Value_Plot.x > 0 & !is.na(df_long_merge$Value_Plot.x) & 
                                                    df_long_merge$Value_Plot.x/(df_long_merge$Value_Plot.y+.001) > 1 & #add small number to remove NA or 0
                                                    df_long_merge$p_val.x < 0.05,]$id)
 )
 saveRDS(targets_listed, "output/venn_plot_targets_pulldown.RDS")

 #investigate where they are in one DMSO
 in_DMSO <- unique(df_long_merge[!is.na(df_long_merge$Value_Plot.x) & 
                        !is.na(df_long_merge$Value.y) &
                        df_long_merge$Value_Plot.x/(df_long_merge$Value_Plot.y+.001) > 1 & #add small number to remove NA or 0
                        df_long_merge$p_val.x <= 1E-10,]$id)
 
 query_tests <- list()

 for(k in in_DMSO){
   
   query_data_per <- df_long_merge[!is.na(df_long_merge$Value_Plot.x) & 
                                     #!is.na(df_long_merge$Value.y) &
                                     df_long_merge$Value_Plot.x/(df_long_merge$Value_Plot.y+.001) > 1 & #add small number to remove NA or 0
                                     df_long_merge$p_val.x <= 1E-10&
                                     df_long_merge$id == k,]
   
   query_tests[[k]] <- data.frame("Dose" = query_data_per$dose, "DMSO Value" = query_data_per$Value.y, "Ibru Value" = query_data_per$Value.x)
   
 }

 check_pass <- function(df) {
   # Identify doses with any DMSO presence
   doses_with_dmso <- df$Dose[!is.na(df$DMSO.Value)]
   
   # Filter out rows where Dose is in the doses_with_dmso
   df_clean <- df %>% 
     filter(!Dose %in% doses_with_dmso)
   
   # Count non-NA Ibru.Values by dose in the cleaned data
   ibru_counts <- df_clean %>%
     group_by(Dose) %>%
     summarise(count = sum(!is.na(Ibru.Value)), .groups = 'drop')
   
   # Check if any remaining dose has at least two valid Ibru.Values
   any(ibru_counts$count >= 2)
 }
 
 # Apply to each element of the list
 results <- lapply(query_tests, check_pass)
 
length( names(results)[results == FALSE])

 
targets_listed <- list(#"TPP hits" = unique(proteoformtppdata[proteoformtppdata$pVal < .01,]$ioi),
  "RCH-ACV TPP hits" = unique(df_long_merge[df_long_merge$pAdj.x < 0.05,]$id)[!is.na(unique(df_long_merge[df_long_merge$pAdj.x < 0.05,]$id))],
  # "RCH-ACV pulldown hits before" = unique(df_long_merge[!is.na(df_long_merge$Value_Plot.x) & 
  #                                                  df_long_merge$Value_Plot.x/(df_long_merge$Value_Plot.y+.001) > 1 & #add small number to remove NA or 0
  #                                                  df_long_merge$p_val.x <= 1E-10,]$id),
   "RCH-ACV pulldown hits" = unique(df_long_merge[!is.na(df_long_merge$Value_Plot.x) & 
                                                          df_long_merge$Value_Plot.x/(df_long_merge$Value_Plot.y+.001) > 1 & #add small number to remove NA or 0
                                                          df_long_merge$p_val.x <= 1E-10 &
                                                   !(df_long_merge$id %in% names(results)[results == FALSE]),]$id)
  
)
 

pdf(file = "output/venn_plot_targets_pulldown.pdf", width = 5, height = 5.2)
 
 ggvenn(targets_listed, fill_color = c("blue", "#673F56", auto_scale = TRUE)#, auto_scale = TRUE
 )
 dev.off()
 
 library(UpSetR)
 createUpSetPlot <- function(targets_listed) {
   upset(fromList(targets_listed),
         main.bar.color = "#4F81BD",
         matrix.color = "#E67E22",
         sets.bar.color = "#56B4E9",
         number.angles = 30, 
         point.size = 3.5,
         line.size = 2,
         sets.x.label = "Number of Hits",
         text.scale = 2)
 }
 pdf(file = "output/UpSet_pulldown.pdf", width = 6, height = 6)
 
 createUpSetPlot(targets_listed)
 dev.off()
 
 library(eulerr)
 
 createEulerPlot <- function(targets_listed) {
   plot(euler(targets_listed),
        quantities = TRUE,
        main = "Proportional Euler Diagram",
        fills = c("#E69F00", "#56B4E9", "#009E73"),
        edges = list(col = "#0072B2"))
 }
 
 pdf(file = "output/eulerplot_pulldown.pdf", width = 5, height = 5.2)
 
 createEulerPlot(targets_listed)
 dev.off()
 
 #intensity 
 mean(df_long_merge[df_long_merge$id == "WASHC2C_1" & df_long_merge$dose.x == "20uM",]$Value_Plot.x, na.rm = TRUE)
 mean(df_long_merge[df_long_merge$id == "BTK_2" & df_long_merge$dose.x == "20uM",]$Value_Plot.x, na.rm = TRUE)





















