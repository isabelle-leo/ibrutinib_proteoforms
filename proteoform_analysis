library(data.table)
library(tidyverse)
library(Biobase)
library(matrixStats)
library(Hmisc)
library(igraph)
library(BiocParallel)
library(biobroom)
library(cowplot)
library(ggrepel)
library(ggpmisc)
library(ggthemes)
library(RColorBrewer)
library(leiden)
library(curl)
library(Rcpi)
library(NGLVieweR)
library(ComplexHeatmap)

theme_set(theme_tufte())

#setwd("~/your/path/")
'%!in%' <- function(x,y)!('%in%' (x,y))

sourceDir <- function(path, ...) {
  for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
    source(file.path(path, nm), ...)
  }
}

sourceDir(path = "~/path/pepnet")
BPPARAM <- BiocParallel::MulticoreParam(workers = 2, progressbar = TRUE)

# import PSMs
#from multiple datasets!
rchacv <- fread("~/path/RCHACV/target_psmtable.txt")
sw13 <- fread("~/path/SW13/target_psmtable.txt")
sw13$`Biological set` <- paste0(sw13$`Biological set`, "_SW13")               
sw13$`Gene` <- sw13$`Gene ID`
sw13$`Gene Symbol` <- sw13$`Gene Name`

big_psm_file <- rbind(rchacv, sw13, fill = TRUE)
write_lines(file = "~/path/big_psm_file.txt", big_psm_file, sep = "\t")
rm(rchacv, sw13, big_psm_file)
gc()


psms <- import_psms_from_nf(file = "~/path/big_psm_file.txt",
                            id_col = "Gene Symbol",
                            protein_id_col = "Protein",
                            peptide_col = "Peptide",
                            quan_regex = "tmt10plex")
#if read in is complicated (r update) use the code after the read in with the big psm file object
#then line by line the function should work

# saveRDS(psms, "~/path/psms.RDS")
psms <- readRDS("~/path/psms.RDS")
psms <- psms[psms@featureData@data[["set"]] != "TH6744_1_SW13", ]
psms <- psms[psms@featureData@data[["set"]] != "TH6744_2_SW13", ]

# # sum to peptides
#rewrote this function from deepmeltome version! Small data processing tweaks and improvements/generalizations
peptides_raw <- psms_to_peptides(psms = psms,
                                 summarise_fun = sum,
                                 sample_meta_file = "~/path/ibrutinib_sample_meta.tsv",
                                 sample_id_col = "set_sample_id")

saveRDS(peptides_raw, "~/path/peptides_raw.RDS")
# 


peptides_raw <- readRDS(file = "~/path/peptides_raw.RDS")

peptides_vsn_norm <- vsn_normalize_by_temperature(e_set = peptides_raw)

peptides <- build_ratios_to_lowest_temperature(e_set = peptides_vsn_norm, sample_col = "Biological set")

# extract first protein IDs
fData(peptides) <- peptides %>%
  fData() %>%
  separate(protein_ids,
           sep = ";",
           into = "first_protein_id",
           extra = "drop",
           remove = FALSE)

# combine sample name and temperature
pData(peptides)$sample_name_temp <- paste0(pData(peptides)$'Biological set', "_", pData(peptides)$temperature)

saveRDS(object = peptides, file = "~/path/peptides.RDS")
peptides <- readRDS(file =  "~/path/peptides.RDS")

############### ANALYSIS ###############

#filter out peptides that have multiple gene symbols

peptides <- peptides[!grepl(";",peptides@featureData@data[["id"]]),]

# similarity analysis (euclidean distance)
# similarities <- evaluate_similarity(e_set = peptides,
#                                     filter_params = list(min_num_peptides_per_ioi = 10,
#                                                          max_num_peptides_per_ioi = Inf,
#                                                          min_peptides_per_sample = 2,
#                                                          min_samples_with_sufficient_peptides = 20),
#                                     include_ambiguous_ids = TRUE,
#                                     method = "euclidean",
#                                     transform_fun = function (x) 1 / (1 + x),
#                                     BPPARAM = BPPARAM)

similarities_cosine <- evaluate_similarity(e_set = peptides,
                                    filter_params = list(min_num_peptides_per_ioi = 5,
                                                         max_num_peptides_per_ioi = Inf,
                                                         min_peptides_per_sample = 2,
                                                         min_samples_with_sufficient_peptides = 40),
                                    include_ambiguous_ids = TRUE,
                                    method = "cosine",
                                    transform_fun = function (x) x,
                                    BPPARAM = BPPARAM)


saveRDS(object = similarities, file ="~/path/similarities.RDS")
saveRDS(object = similarities_cosine, file ="~/path/similarities_cosine.RDS")

similarities <- readRDS(file = "~/path/similarities.RDS")

# build graph
graphs <- build_graphs(similarities = similarities, 
                       e_set = peptides,
                       filter_params = list(lower_similarity_cutoff = 0,
                                            lower_n_cutoff = 20, #only if it's in two sets
                                            upper_q_cutoff = Inf),
                       BPPARAM = BPPARAM)

graphs_cosine <- build_graphs(similarities = similarities_cosine, 
                       e_set = peptides,
                       filter_params = list(lower_similarity_cutoff = 0,
                                            lower_n_cutoff = 20, #only if it's in two sets
                                            upper_q_cutoff = Inf),
                       BPPARAM = BPPARAM)

# store
saveRDS(object = graphs, file = "~/path/graphs_meltomeparams.RDS")
saveRDS(object = graphs_cosine, file = "~/path/graphs_cosine.RDS")

graphs <- readRDS(file = "~/path/graphs_meltomeparams.RDS")

# build graph with more robust parameters
# graphs <- build_graphs(similarities = similarities,
#                        e_set = peptides,
#                        filter_params = list(lower_similarity_cutoff = 0,
#                                             lower_n_cutoff = 30, #only if it's in three sets
#                                             upper_q_cutoff = Inf),
#                        BPPARAM = BPPARAM)

graphs <- detect_communities(graphs = graphs,
                             detect_algorithm = cluster_leiden,
                             BPPARAM = BPPARAM)

graphs_cosine <- detect_communities(graphs = graphs_cosine,
                             detect_algorithm = cluster_leiden,
                             res = 1,
              
                             BPPARAM = BPPARAM)
# store
saveRDS(object = graphs, file = "~/path/graphs_comms.RDS")
saveRDS(object = graphs_cosine, file = "~/path/graphs_comms_cosine.RDS")
graphs <- readRDS("~/path/graphs_comms.RDS")
graphs_01 <- graphs[(lapply(graphs, get.graph.attribute, name = "proteoform_modularity") > 0) %>% unlist()]
#graphs_01 <- graphs_cosine[(lapply(graphs_cosine, get.graph.attribute, name = "proteoform_modularity") > 0) %>% unlist()]

############### PROTEOFORM AGGREGATION ###############

proteoforms_intensities <- aggregate_peptides_to_proteoforms(e_set = peptides_raw,
                                                             graphs = graphs_01,
                                                             aggregation_fun = sum,
                                                             BPPARAM = BPPARAM)

# filter out small number of peptides and ambiguous only proteoforms
proteoforms_intensities_filtered <- proteoforms_intensities %>%
  .[fData(.)$ambiguous_peptides_only == FALSE, ] %>%
  .[fData(.)$num_peptides > 2] %>%
  .[fData(.)$ambiguity_ratio < 0.5]

saveRDS(proteoforms_intensities, "~/path/proteoforms_intensities.RDS")
proteoforms_intensities <- readRDS("~/path/proteoforms_intensities.RDS")

# VSN normalisation
proteoforms_vsn_norm <- vsn_normalize_by_temperature(e_set = proteoforms_intensities_filtered)


# ratios to lowest temperature
proteoforms <- build_ratios_to_lowest_temperature(e_set = proteoforms_vsn_norm, sample_col = "Biological set")

proteoforms$sample_name <- proteoforms$'Biological set'
# proteoforms$treatment <- c("IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
#                            "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
#                            "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
#                            "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
#                            "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
#                            "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
#                            "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
#                            "DMSO", "DMSO", "DMSO", "DMSO", "DMSO")

saveRDS(object = proteoforms, file = "~/path/proteoforms.RDS")
proteoforms <- readRDS(file = "~/path/proteoforms.RDS")

# set the membership colors
palette <- c("#FF5376", "#72AFD9", "#E3D26F", "#A288E3", "#1B5299", "#68D8D6", "#B78DA3")
membership_colors <- get_color_vector(colors = palette, vec = seq_len(8))

iois <- proteoforms %>%
  fData() %>%
  filter(membership != 0) %>%
  .$ioi %>%
  gsub("_[0-9]+$", "", .) %>%
  unique()

proteoforms$sample_name <- proteoforms$'Biological set'
proteoforms$treatment <- c("IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO")
proteoforms@phenoData@data$sample_split <- NULL

plot_proteoform <- function (ioi,
          e_set,
          x_col = "sample_name",
          facet_col = NULL,
          color_col = "membership",
          colors = c("1" = "#FF5376",
                     "2" = "#72AFD9",
                     "3" = "#E3D26F",
                     "4" = "#A288E3",
                     "5" = "#1B5299",
                     "6" = "#68D8D6",
                     "NA" = "#494e57"),
          add_splines = FALSE,
          hide_lines = FALSE,
          line_col = NULL,
          x_label = "Sample name",
          y_label = "log2 proteoform level",
          y_limits = c(-0.2, 1.2),
          custom_theme = NULL) {
  
  ioi_proteoforms <- e_set[fData(e_set)$ioi == ioi, ]
  
  if (nrow(ioi_proteoforms) == 0) stop("No data found for this ID of interest.")
  
  data <- ioi_proteoforms %>%
    tidy.ExpressionSet(addPheno = TRUE) %>%
    set_names(gsub("^gene$", "proteoform_id", colnames(.))) %>%
    left_join(fData(ioi_proteoforms), by = "proteoform_id") %>%
    mutate(membership = as.factor(membership))
  
  data$x_col <- data[[x_col]]
  data$color_col <- data[[color_col]]
  
  if (!is.null(facet_col) & facet_col == "sample_split") {
    facet_col_plot <- as.data.frame(data)
    facets_plot <- paste0( facet_col_plot$sample_name_machine, ", proteoform ", facet_col_plot$membership)
    data$sample_split <- facets_plot
    # p <- p + facet_wrap(facets = facets_plot)
  }
  
  p <- data %>%
    ggplot(aes(x = x_col,
               y = value,
               group = interaction(proteoform_id, sample_name),
               color = color_col)) +
    geom_point() +
    scale_color_manual(values = colors, name = color_col) +
    ylim(y_limits)
  
  if (!hide_lines) {
    p <- p + geom_line(alpha = .7)
  }
  
  if (add_splines & is.null(line_col) & facet_col != "sample_split") {
    p <- p + geom_smooth(method = "lm", formula = 'y ~ splines::ns(x, df = 4)', se = FALSE, alpha = .4, size = .7)
  }
  if (add_splines & !is.null(line_col)& facet_col == "sample_split") {
    p <- p + geom_smooth(aes(x = x_col,
                             y = value,
                             group = interaction(sample_split, treatment), linetype = treatment), method = "lm", formula = 'y ~ splines::ns(x, df = 4)', se = FALSE, alpha = .4, size = .7)
  }
  if (add_splines & !is.null(line_col)& facet_col != "sample_split") {
    line_col_plot <- as.data.frame(data)
    treatment <- line_col_plot[,line_col]
    p <- p + geom_smooth(aes(linetype = treatment), method = "lm", formula = 'y ~ splines::ns(x, df = 4)', se = FALSE, alpha = .4, size = .7)
  }
  
  if (!is.null(facet_col) ) {
    p <- p + facet_wrap(facets = facet_col)
  }
  
  if (!is.null(custom_theme)) {
    p <- p + custom_theme()
  }
  
  p <- p +
    xlab(x_label) + ylab(y_label) +
    ggtitle(ioi) +
    theme(legend.position = "bottom")
  
  print(p)
  
  return(p)
}


# plot
o <- "~/path/proteoforms_split_cell_lines_treatment"
if (!dir.exists(o)) dir.create(o, recursive = TRUE)
for (ioi in iois) {
  pdf(file = file.path(o, paste0(ioi, ".pdf")))
  plot_proteoform(ioi = ioi,
                  e_set = proteoforms,
                  x_col = "temperature",
                  facet_col = "sample_name_machine",
                  hide_lines = TRUE,
                  colors = membership_colors,
                  add_splines = TRUE,
                  line_col = 'Treatment') + theme_pubr()
  dev.off()
}

#for individual plotting, fully split
ioi <- "RASSF2"
proteoforms$storage <- proteoforms$sample_name_machine
proteoforms$sample_name_machine <- "All samples"
plot_proteoform(ioi = ioi,
                e_set = proteoforms,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
proteoforms$sample_name_machine <- proteoforms$storage
plot_proteoform(ioi = ioi,
                e_set = proteoforms,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "ABL1",
                e_set = proteoforms,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "RASSF2",
                e_set = proteoforms,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "SENP6",
                e_set = proteoforms,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()



proteoforms_intensities_lowesttemp <- proteoforms_vsn_norm
proteoforms_intensities_lowesttemp$sample_name <- proteoforms_vsn_norm$'Biological set'
proteoforms_intensities_lowesttemp$treatment <- c("IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                                                  "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                                                  "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                                                  "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                                                  "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                                                  "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                                                  "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                                                  "DMSO", "DMSO", "DMSO", "DMSO", "DMSO")
proteoforms_intensities_lowesttemp <- proteoforms_intensities_lowesttemp[,proteoforms_intensities_lowesttemp$temperature == "37"]



saveRDS(proteoforms_intensities_lowesttemp, "~/path/proteoforms_abundance_lowesttemp.RDS")


###########################################################################
#Create protein dataset
#make a graphs object that has a protein with no proteoforms
graphs_02 <- list("SCAF8" = graphs_01$SCAF8)
proteins_intensities <- aggregate_peptides_to_proteoforms(e_set = peptides_raw,
                                                             graphs =graphs_02,
                                                             aggregation_fun = sum,
                                                             BPPARAM = BPPARAM)
saveRDS(proteins_intensities, "~/path/proteins_intensities.RDS")
proteins_intensities <- readRDS("~/path/proteins_intensities.RDS")
proteins_vsn_norm <- vsn_normalize_by_temperature(e_set = proteins_intensities)

proteins <- build_ratios_to_lowest_temperature(e_set = proteins_vsn_norm, sample_col = "Biological set")
# ratios to lowest temperature

proteins$sample_name <- proteins$'Biological set'
proteins$treatment <- c("IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                           "DMSO", "DMSO", "DMSO", "DMSO", "DMSO")

saveRDS(object = proteins, file = "~/path/proteins.RDS")
proteins <- readRDS(file = "~/path/proteins.RDS")

plot_proteoform(ioi = "SENP6",
                e_set = proteins,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()

###########################################################################
#NPARC


fit_and_eval_melting_curves <- function(
    proteins, sample_meta, 
    by_var = "cellline",
    subset_var = "697 (EU-3)",
    filter_based_on_alt_model = FALSE,
    alt_model_df = NULL,
    BPPARAM = BiocParallel::SerialParam(progressbar = TRUE),
    min_samples = 40){
  
  stopifnot(by_var %in% c("cellline", "subtype", "none"))
  
  if(by_var == "cellline"){
    # create tidy protein data frame per cell lines
    proteins_df <- biobroom::tidy.ExpressionSet(
      proteins, addPheno = TRUE) %>% 
      #filter(sample_name_machine == subset_var) %>% 
      group_by(gene) %>% 
      # re-compute fold changes
      mutate(value = value / value[temperature == "37"]) %>% 
      #ungroup %>% 
      # left_join(sample_meta %>% 
      #             dplyr::select(sample_name, subtype),
      #           by = "sample_name") %>% 
      mutate(temperature = as.numeric(temperature)) %>% 
      dplyr::select(uniqueID = gene,
                    relAbundance = value,
                    temperature,
                    channel,
                    set, 
                    sample_name_machine,
                    cellline) %>% 
      na.omit() %>% 
      group_by(uniqueID) %>% 
      filter(n() >= min_samples) %>% 
      ungroup
    
  }else if(by_var == "subtype"){
    proteins_df <- biobroom::tidy.ExpressionSet(
      proteins, addPheno = TRUE) %>% 
      group_by(sample_name_machine, gene) %>% 
      # re-compute fold changes
      mutate(value = value / value[temperature == "37"]) %>% 
      ungroup %>% 
      # left_join(sample_meta %>% 
      #             dplyr::select(sample_name, subtype),
      #           by = "sample_name") %>% 
      mutate(temperature = as.numeric(temperature)) %>% 
      dplyr::select(uniqueID = gene,
                    relAbundance = value,
                    temperature,
                    channel,
                    set, 
                    sample_name_machine,
                    subtype) %>% 
      filter(subtype == subset_var) %>% 
      na.omit() %>% 
      group_by(sample_name_machine, uniqueID) %>% 
      filter(n() == 8) %>% 
      ungroup
  }else if(by_var == "none"){
    proteins_df <- biobroom::tidy.ExpressionSet(
      proteins, addPheno = TRUE) %>% 
      group_by( gene) %>% 
      # re-compute fold changes
      mutate(value = value / value[temperature == "37"]) %>% 
      #ungroup %>% 
      # left_join(sample_meta %>% 
      #             dplyr::select(sample_name, subtype),
      #           by = "sample_name") %>% 
      mutate(temperature = as.numeric(temperature)) %>% 
      dplyr::select(uniqueID = gene,
                    relAbundance = value,
                    temperature,
                    channel,
                    set, 
                    sample_name_machine) %>% 
      na.omit() %>% 
      group_by(uniqueID) %>% 
      filter(n() >= min_samples) %>% 
      ungroup
    
    if(filter_based_on_alt_model){
      join_df <- alt_model_df %>% 
        dplyr::select(sample_name_machine = sample_name,
                      uniqueID = id) %>% 
        mutate(hq = 'TRUE')
      
      proteins_df <- proteins_df %>% 
        left_join(join_df, by = c("sample_name_machine", "uniqueID")) %>% 
        filter(hq == 'TRUE')
    }
    
  }
  
  control = NPARC:::getParams()
  
  groups_var <- NULL
  if(by_var == "cellline"){
    groups_var <- proteins_df$cellline
  }else if(by_var == "subtype"){
    groups_var <- proteins_df$subtype
  }else if(by_var == "none"){
    proteins_df$group <- "everything"
    groups_var <- proteins_df$group
  }
  
  # fit_res <- NPARC:::invokeParallelFits(
  #   x = proteins_df$temperature,
  #   y = proteins_df$relAbundance,
  #   id = proteins_df$uniqueID,
  #   groups = groups_var,
  #   BPPARAM = BPPARAM,
  #   maxAttempts = control$maxAttempts,
  #   returnModels = FALSE,
  #   start = control$start)
  fit_res <- NPARC::NPARCfit( x = proteins_df$temperature,
                              y = proteins_df$relAbundance,
                              id = proteins_df$uniqueID,
                              groupsNull = groups_var,
                              groupsAlt = proteins_df$sample_name_machine)
  
  #return(fit_res$modelMetrics)
  return(fit_res)
  
}
proteoforms <- readRDS(file = "~/path/proteoforms.RDS")

phenoData(proteoforms)$sample_name <- phenoData(proteoforms)$Treatment
phenoData(proteoforms)$cellline <- phenoData(proteoforms)$sample_name_machine
phenoData(proteoforms)$cellline_treatment <- paste0(phenoData(proteoforms)$cellline, phenoData(proteoforms)$Treatment)
phenoData(proteoforms)$sample_name_machine <- phenoData(proteoforms)$Treatment

#first NPARC test - cell lines are the null model (only drug influenced, cell line differences are considered)
modelMetrics <- fit_and_eval_melting_curves(proteins = proteoforms, sample_meta = phenoData(proteoforms), by_var = "cellline", subset_var = NULL, min_samples = 80)
nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")

saveRDS(object = nparctest, file = "~/path/nparc_df_all.RDS")
nparctest <- readRDS("~/path/nparc_df_all.RDS")
write_delim(nparctest, file = "~/path/nparc_df_all.txt")

#second NPARC test - all samples are the null model (only drug influenced, cell line differences not considered)
modelMetrics <- fit_and_eval_melting_curves(proteins = proteoforms, sample_meta = phenoData(proteoforms), by_var = "none", subset_var = NULL, min_samples = 80)
nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")

saveRDS(object = nparctest, file = "~/path/nparc_df_all_full_null.RDS")
nparctest <- readRDS("~/path/nparc_df_all_full_null.RDS")
write_delim(nparctest, file = "~/path/nparc_df_all_full_null.txt")

length(unique(gsub("[0-9]$", "", nparctest[nparctest$pVal < .05,]$id)))

#third NPARC test - subset RCH-ACV, all samples are the null model (only drug influenced, cell line differences are considered)
modelMetrics <- fit_and_eval_melting_curves(proteins = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"], sample_meta = phenoData(proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"]), by_var = "none", subset_var = NULL, min_samples = 40)
nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")

saveRDS(object = nparctest, file = "~/path/nparc_df_rchacv.RDS")
nparctest <- readRDS("~/path/nparc_df_rchacv.RDS")
write_delim(nparctest, file = "~/path/nparc_df_rchacv.txt")

hits_rchacv <- nparctest[nparctest$pVal < .05,]$id

#fourth NPARC test - subset SW13, all samples are the null model (only drug influenced, cell line differences are considered)
modelMetrics <- fit_and_eval_melting_curves(proteins = proteoforms[,proteoforms@phenoData@data$subtype == "Small-cell.carcinoma"], sample_meta = phenoData(proteoforms[,proteoforms@phenoData@data$subtype == "Small-cell.carcinoma"]), by_var = "none", subset_var = NULL, min_samples = 40)
nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")

saveRDS(object = nparctest, file = "~/path/nparc_df_sw13.RDS")
nparctest <- readRDS("~/path/nparc_df_sw13.RDS")
write_delim(nparctest, file = "~/path/nparc_df_sw13.txt")

hits_sw13 <- nparctest[nparctest$pVal < .05,]$id
length(unique(gsub("[0-9]$", "", nparctest[nparctest$pVal < .05,]$id)))

hits_rchacv[hits_rchacv %in% hits_sw13]

#fifth NPARC test??? - cell lines are the null model (cell line differences are considered in either direction from treatment as hits)
# modelMetrics <- fit_and_eval_melting_curves(proteins = proteoforms, sample_meta = phenoData(proteoforms), by_var = "cellline", subset_var = NULL, min_samples = 80)
# nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")
# 
# saveRDS(object = nparctest, file = "~/path/nparc_df_all_full_null.RDS")
# nparctest <- readRDS("~/path/nparc_df_all_full_null.RDS")
# write_delim(nparctest, file = "~/path/nparc_df_all_full_null.txt")

#################################################################
#Redo the tests with protein-level data
proteins <- readRDS("~/path/proteins.RDS")
phenoData(proteins)$sample_name <- phenoData(proteins)$Treatment
phenoData(proteins)$cellline <- phenoData(proteins)$sample_name_machine
phenoData(proteins)$cellline_treatment <- paste0(phenoData(proteins)$cellline, phenoData(proteins)$Treatment)
phenoData(proteins)$sample_name_machine <- phenoData(proteins)$Treatment
#first NPARC test - cell lines are the null model (only drug influenced, cell line differences are considered)
# modelMetrics <- fit_and_eval_melting_curves(proteins = proteins, sample_meta = phenoData(proteins), by_var = "cellline", subset_var = NULL, min_samples = 80)
# nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")
# 
# saveRDS(object = nparctest, file = "~/path/nparc_proteins_df_all.RDS")
# nparctest <- readRDS("~/path/nparc_proteins_df_all.RDS")
# write_delim(nparctest, file = "~/path/nparc_proteins_df_all.txt")

#second NPARC test - all samples are the null model (only drug influenced, cell line differences not considered)
modelMetrics <- fit_and_eval_melting_curves(proteins = proteins, sample_meta = phenoData(proteins), by_var = "none", subset_var = NULL, min_samples = 80)
nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")

saveRDS(object = nparctest, file = "~/path/nparc_proteins_df_all_full_null.RDS")
nparctest <- readRDS("~/path/nparc_proteins_df_all_full_null.RDS")
# nparctest$p.value <- pf(nparctest$fStat, 39, 79, lower.tail = FALSE) #empirical test df adjustment
# nparctest$p.adj <- stats::p.adjust(nparctest$p.value, method = "BH") #p value adjust 
write_delim(nparctest, file = "~/path/nparc_proteins_df_all_full_null.txt")

length(unique(gsub("[0-9]$", "", nparctest[nparctest$pVal < .05,]$id)))

#third NPARC test - subset RCH-ACV, all samples are the null model (only drug influenced, cell line differences are considered)
modelMetrics <- fit_and_eval_melting_curves(proteins = proteins[,proteins@phenoData@data$subtype == "BCP-ALL"], sample_meta = phenoData(proteins[,proteins@phenoData@data$subtype == "BCP-ALL"]), by_var = "none", subset_var = NULL, min_samples = 40)
nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")

saveRDS(object = nparctest, file = "~/path/nparc_proteins_df_rchacv.RDS")
nparctest <- readRDS("~/path/nparc_proteins_df_rchacv.RDS")
nparctest$p.adj <- stats::p.adjust(nparctest$pVal, method = "BH")
write_delim(nparctest, file = "~/path/nparc_proteins_df_rchacv.txt")

hits_rchacv <- nparctest[nparctest$pVal < .05,]$id

#fourth NPARC test - subset SW13, all samples are the null model (only drug influenced, cell line differences are considered)
modelMetrics <- fit_and_eval_melting_curves(proteins = proteins[,proteins@phenoData@data$subtype == "Small-cell.carcinoma"], sample_meta = phenoData(proteins[,proteins@phenoData@data$subtype == "Small-cell.carcinoma"]), by_var = "none", subset_var = NULL, min_samples = 40)
nparctest <- NPARC::NPARCtest(modelMetrics$metrics, dfType = "empirical")

saveRDS(object = nparctest, file = "~/path/nparc_proteins_df_sw13.RDS")
nparctest <- readRDS("~/path/nparc_proteins_df_sw13.RDS")
nparctest$p.adj <- stats::p.adjust(nparctest$pVal, method = "fdr")
write_delim(nparctest, file = "~/path/nparc_proteins_df_sw13.txt")

hits_sw13 <- nparctest[nparctest$pVal < .05,]$id
length(unique(gsub("_[0-9]$", "", nparctest[nparctest$pVal < .05,]$id)))

#make object for the shiny app
nparctest_rchacv <- readRDS("~/path/nparc_df_rchacv.RDS")
nparctest_sw13 <- readRDS("~/path/nparc_df_sw13.RDS")
nparctest_all <- readRDS( "~/path/nparc_df_all_full_null.RDS")

nparctest_rchacv$CellType <- "RCHACV"
nparctest_sw13$CellType <- "SW13"
nparctest_all$CellType<- "Both"

nparctest_both <- rbind(nparctest_rchacv, nparctest_sw13)
saveRDS(object = nparctest_both, "~/path/nparc_df_both_new.RDS")
nparctest_both <- rbind(nparctest_rchacv, nparctest_sw13, nparctest_all)
#################################################################
#is there a tm difference
modelMetrics_proteoforms <- fit_and_eval_melting_curves(proteins = proteoforms, sample_meta = phenoData(proteoforms), by_var = "none", subset_var = NULL, min_samples = 80)
saveRDS(modelMetrics_proteoforms, "~/path/model_metrics_proteoforms_all.RDS")
modelMetrics_proteoforms <-readRDS("~/path/model_metrics_proteoforms_all.RDS")

library(ggplot2)
library(ggpubr)
my_comparisons <- list(c(1, 2))
ggplot(modelMetrics_proteoforms$metrics[modelMetrics_proteoforms$metrics$group != "everything" & modelMetrics_proteoforms$metrics$id %in% nparctest_all[nparctest_all$pAdj < .05,]$id,], mapping = aes(x = group, y = aumc)) + geom_violin( draw_quantiles = c(.05,.50, .95), scale = "width") + geom_jitter(size = 2, alpha = .1)+
  ggpubr::theme_pubr()+ ylim(3, 30) + stat_compare_means(comparisons = my_comparisons, method = "t.test", paired = TRUE) 

modelMetrics_sw13 <- fit_and_eval_melting_curves(proteins = proteoforms[,proteoforms@phenoData@data$subtype == "Small-cell.carcinoma"], sample_meta = phenoData(proteoforms[,proteoforms@phenoData@data$subtype == "Small-cell.carcinoma"]), by_var = "none", subset_var = NULL, min_samples = 40)
modelMetrics_rchacv <- fit_and_eval_melting_curves(proteins = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"], sample_meta = phenoData(proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"]), by_var = "none", subset_var = NULL, min_samples = 40)
saveRDS(modelMetrics_sw13, "~/path/model_metrics_proteoforms_sw13.RDS")
saveRDS(modelMetrics_rchacv, "~/path/model_metrics_proteoforms_rchacv.RDS")

#################################################################
#################################################################

#Explore data from other studies
#Kuster kinobeads, tested ibrutinib 3-3000 nM
kinobeadsdata <- readxl::read_xlsx("~/path/aan4368_tables1-11/aan4368_Table_S3.xlsx", sheet = 2)

#filter ibrutinib only
kinobeadsdata <- kinobeadsdata[,c("Name","Kinase","Direct binder","Ibrutinib")]

#Cravatt SILAC
silacdata <- readxl::read_xlsx("~/path/41589_2014_BFnchembio1582_MOESM162_ESM (1).xlsx", sheet = 4)

#proteoformtppdata <- readRDS("~/path/nparc_df_both_new.RDS")
proteoformtppdata <- rbind(nparctest_rchacv, nparctest_sw13, 
                           nparctest_all
                           )
proteoformtppdata$ioi <- gsub("_[0-9]", "", proteoformtppdata$id)
library(ggvenn)

targets_listed <- list(#"TPP hits" = unique(proteoformtppdata[proteoformtppdata$pVal < .01,]$ioi),
                       "Kinobeads hits" = unique(kinobeadsdata[kinobeadsdata$Ibrutinib %!in% c("n.i.", "n.d."),]$Name)[unique(kinobeadsdata[kinobeadsdata$Ibrutinib %!in% c("n.i.", "n.d."),]$Name) %in% unique(proteoformtppdata$ioi)] ,
                       #"SILAC hits" = unique(silacdata$...3[!is.na(silacdata$...3) & silacdata$...3 != "symbol"])[unique(silacdata$...3[!is.na(silacdata$...3) & silacdata$...3 != "symbol"])%in% unique(proteoformtppdata$ioi)],
                       "RCH-ACV TPP hits" = unique(gsub("_[0-9]", "", nparctest_rchacv[nparctest_rchacv$pVal < .01,]$id)),
                       "SW13 TPP hits" = unique(gsub("_[0-9]", "", nparctest_sw13[nparctest_sw13$pVal < .01,]$id))
                       )
saveRDS(targets_listed, "output/venn_plot_targets_listed.RDS")
ggvenn(targets_listed, fill_color = c("blue", "#A23F56", "#673F56")#, auto_scale = TRUE
       )
# ggvenn(targets_listed[c("TPP hits", "Kinobeads hits")], auto_scale = TRUE
# )

###########################################################################
#Plots from RCH-ACV NPARC HITS
# proteoforms$storage <- proteoforms$sample_name_machine
# proteoforms$sample_name_machine <- "All samples"
proteoforms$treatment <- c("IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                        "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                        "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                        "IBRUTINIB", "IBRUTINIB", "IBRUTINIB", "IBRUTINIB","IBRUTINIB",
                        "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                        "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                        "DMSO", "DMSO", "DMSO", "DMSO", "DMSO",
                        "DMSO", "DMSO", "DMSO", "DMSO", "DMSO")

#NPARC_results_rch <- readRDS("~/Documents/githubspot/ibrutinib-cll/shiny_stable6/nparc_df_rchacv.RDS")
View(readRDS("~/Documents/githubspot/ibrutinib-cll/shiny_stable6/nparc_df_rchacv.RDS"))
plot_proteoform(ioi = "YES1",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "CYCS",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "SENP6",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "CTH",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "MSRB2",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "GSK3B",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "GSK3B",
                e_set = proteoforms[,],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "GSK3B",
                e_set = proteins,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "SNX1",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()
plot_proteoform(ioi = "WASHC2C",
                e_set = proteoforms[,proteoforms@phenoData@data$subtype == "BCP-ALL"],
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()

#################################################################
#################################################################
#Plot the data

#read uniprot IDs generated in PDB processing script for shiny app
uniprot_ids <- read.csv("~/path/uniprot_ids_all_meltome.txt")
interpro_description <- read.csv("~/path/interpro_description_all_meltome.txt")
uniprot_ids <- uniprot_ids[uniprot_ids$uniprot_gn_id != "",]
uniprot_ids <- uniprot_ids[uniprot_ids$hgnc_symbol != "",]
uniprot_ids <- uniprot_ids[!grepl("A0A", uniprot_ids$uniprot_gn_id),]

#alphafold
readFASTA = function (file = system.file('protseq/P00750.fasta',
                                         package = 'Rcpi'),
                      legacy.mode = TRUE, seqonly = FALSE) {
  
  # Read the fasta file as a vector of strings
  lines = readLines(file)
  
  # Remove comment lines starting with a semicolon ';'
  if (legacy.mode) {
    comments = grep("^;", lines)
    if (length(comments) > 0) {
      lines = lines[-comments]
    }
  }
  
  # Get the line numbers where sequences names are
  ind = which(substr(lines, 1L, 1L) == ">")
  
  # Compute the total number of sequences
  nseq = length(ind)
  
  if (nseq == 0) stop("no line starting with a > character found")
  
  # Localize sequence data
  start = ind + 1
  end = ind - 1
  end = c(end[-1], length(lines))
  
  # Read in sequences
  sequences = lapply(seq_len(nseq),
                     function(i) paste(lines[start[i]:end[i]], collapse = ""))
  
  if (seqonly) return(sequences)
  
  # Read in sequence names
  nomseq = lapply(seq_len(nseq), function (i) {
    firstword = strsplit(lines[ind[i]], " ")[[1]][1]
    substr(firstword, 2, nchar(firstword))
  })
  
  # Give the sequences names to the list elements
  names(sequences) = nomseq
  
  return(sequences)
  
}

get_peptide_numeric <- function(fasta_list, peptide_seq_list){
  peptide_indices <- list()
  for( i in 1:length(peptide_seq_list$peptides)){
    peptide_indices[[rownames(peptide_seq_list[i,])]] <- data.frame(nchar(gsub(paste0(peptide_seq_list$peptides[i], ".*"), "", fasta_list)),
                                                                    peptide_seq_list$peptide[i],
                                                                    peptide_seq_list$membership[i])
    names(peptide_indices[[rownames(peptide_seq_list[i,])]]) <- c("start_position", "peptide")
  }
  return(peptide_indices)
}
get_alphafold_file <- function(ioi, uniprot_ids){
  
  uniprot_ids_options <- length(uniprot_ids[uniprot_ids$hgnc_symbol == ioi,]$uniprot_gn_id) +1
  request_num <- 1
  
  uniprot_ioi <- uniprot_ids[uniprot_ids$hgnc_symbol == ioi,]$uniprot_gn_id[request_num]
  #add the file type
  alphafold_path <- paste0(tempfile(), ".pdb")
  alphafold_file <- curl_fetch_disk(url = paste0("https://alphafold.ebi.ac.uk/files/AF-",uniprot_ioi,"-F1-model_v4.pdb"),
                                    handle = new_handle(),
                                    path = alphafold_path)
  
  while(request_num < uniprot_ids_options & alphafold_file[["status_code"]] == 404){
    request_num <-  request_num +1
    uniprot_ioi <- uniprot_ids[uniprot_ids$hgnc_symbol == ioi,]$uniprot_gn_id[request_num]
    alphafold_file <- curl_fetch_disk(url = paste0("https://alphafold.ebi.ac.uk/files/AF-",uniprot_ioi,"-F1-model_v4.pdb"),
                                      handle = new_handle(),
                                      path = alphafold_path)
  }
  
  return(alphafold_file)
}

get_FASTA_fromalphafold <- function(alphafold_file){
  
  uniprot_ioi <- gsub("https://alphafold.ebi.ac.uk/files/AF-", "", alphafold_file[["url"]])
  uniprot_ioi <- gsub("-F1-model_v4.pdb", "", uniprot_ioi)
  
  #add the file type
  FASTA_path <- paste0(tempfile(), ".fasta")
  FASTA_file <- curl_fetch_disk(url = paste0('https://rest.uniprot.org/uniprotkb/', uniprot_ioi, '.fasta'),
                                handle = new_handle(),
                                path = FASTA_path)
  
  AASeq <- readFASTA(file = FASTA_file[["content"]])
  
  unlink(FASTA_path)
  
  # while(request_num <= uniprot_ids_options & alphafold_file[["status_code"]] == 404){
  #   request_num <-  request_num +1
  #   uniprot_ioi <- uniprot_ids[uniprot_ids$hgnc_symbol == ioi,]$uniprot_gn_id[request_num]
  #   alphafold_file <- curl_fetch_disk(url = paste0("https://alphafold.ebi.ac.uk/files/AF-",uniprot_ioi,"-F1-model_v4.pdb"),
  #                                     handle = new_handle(),
  #                                     path = alphafold_path)
  # }
  
  return(AASeq)
}

alphafold_plot <- function(ioi, uniprot_ids, peptide_seq_list_file = NULL, fasta_file = NULL, membership_colors = membership_colors){
  if(!is_null(peptide_seq_list_file)){peptide_seq_list <- readRDS(peptide_seq_list_file)
  peptide_seq_list <- peptide_seq_list[[ioi]]}else{stop("No peptide membership data provided.")}
  
  ioi_alphafold <- tryCatch({get_alphafold_file(ioi, uniprot_ids)},
                            error = function(e){0})
  
  if(!is_null(fasta_file)){fasta_list <- readRDS(fasta_file)
  fasta_list <- fasta_list[[ioi]][[1]]}else{
    #read a FASTA from uniprot
    #refer to alpha fold so FASTA is consistent
    fasta_list <- get_FASTA_fromalphafold(ioi_alphafold)
    
  }
  
  peptide_indices <- tryCatch({get_peptide_numeric(fasta_list, peptide_seq_list)},
                              error = function(e){0})
  
  
  
  if (ioi_alphafold[["status_code"]] == 404) stop("No AlphaFold structure was found for this ID of interest.")
  
  if (!is.list(peptide_indices)){p <- NGLVieweR(ioi_alphafold[["content"]]) %>%
    addRepresentation("cartoon", param = list(name = "cartoon", backgroundColor = "white", colorScheme = "uniform", colorValue = "#808080")) %>%
    stageParameters(backgroundColor = "white", colorValue = "#808080") %>%
    setQuality("low") %>%
    setFocus(0) %>%
    setSpin(TRUE)
  return(p) }else if(is.list(peptide_indices)){ p <- NGLVieweR(ioi_alphafold[["content"]]) %>%
    addRepresentation("tube", param = list(name = "tube", backgroundColor = "white", colorScheme = "uniform", colorValue = "#808080")) %>%
    stageParameters(backgroundColor = "white", colorValue = "#808080") %>%
    setQuality("low") %>%
    setFocus(0) %>%
    setSpin(FALSE)
  for(i in 1:length(peptide_seq_list$peptides)){
    
    tryCatch({p <- p %>% addRepresentation("surface", param = list(
      colorScheme = "residue",
      colorValue = as.character(membership_colors[peptide_seq_list[i,]$membership]),
      sele = paste0(peptide_indices[[i]]$start_position, "-", 
                    nchar(peptide_indices[[i]]$peptide) + peptide_indices[[i]]$start_position),
      opacity = 0.25
    ))},
    error = function(e){e})
    
    
  }
  
  
  }
  return(p)
  #return the first pdb structure if there are multiple
  
  unlink(ioi_alphafold[["content"]])
  
}

peptide_seq_list_file = "~/path/peptide_seq_list.RDS"

alphafold_plot("ABL1", uniprot_ids = uniprot_ids, peptide_seq_list_file = c("~/path/peptide_seq_list.RDS"), fasta_file =  NULL,membership_colors = c("1" = "#FF5376",
                                                                                                                                              "2" = "#72AFD9",
                                                                                                                                              "3" = "#E3D26F",
                                                                                                                                              "4" = "#A288E3",
                                                                                                                                              "5" = "#1B5299",
                                                                                                                                              "6" = "#68D8D6",
                                                                                                                                              "NA" = "#494e57"
))

alphafold_plot("CTH", uniprot_ids = uniprot_ids, peptide_seq_list_file = c("~/path/peptide_seq_list.RDS"), fasta_file =  NULL,membership_colors = c("1" = "#FF5376",
                                                                                                                                                                                                 "2" = "#72AFD9",
                                                                                                                                                                                                 "3" = "#E3D26F",
                                                                                                                                                                                                 "4" = "#A288E3",
                                                                                                                                                                                                 "5" = "#1B5299",
                                                                                                                                                                                                 "6" = "#68D8D6",
                                                                                                                                                                                                 "NA" = "#494e57"
))
alphafold_plot("GSK3B", uniprot_ids = uniprot_ids, peptide_seq_list_file = c("~/path/peptide_seq_list.RDS"), fasta_file =  NULL,membership_colors = c("1" = "#FF5376",
                                                                                                                                                                                                "2" = "#72AFD9",
                                                                                                                                                                                                "3" = "#E3D26F",
                                                                                                                                                                                                "4" = "#A288E3",
                                                                                                                                                                                                "5" = "#1B5299",
                                                                                                                                                                                                "6" = "#68D8D6",
                                                                                                                                                                                                "NA" = "#494e57"
))


#########################
#Interpro
interpro_file <- "~/path/interpro_description_all_meltome.txt"
#interpro_description$hgnc_symbol
#read for function testing 
ioi = "RASSF2"
interpro_plot <- function(ioi, interpro_file, uniprot_ids, peptide_seq_list_file = NULL, fasta_file = NULL, 
                          membership_colors = membership_colors, interpro_colors = c("#FF5376", "#72AFD9", "#E3D26F", "#A288E3", "#1B5299", "#68D8D6", "#B78DA3")){
  
  interpro_ioi <- read.csv(interpro_file)
  interpro_ioi <- interpro_ioi[interpro_ioi$hgnc_symbol == ioi & !is.null(interpro_ioi$interpro_description) & !is.na(interpro_ioi$interpro_description),]
  
  ioi_alphafold <- tryCatch({get_alphafold_file(ioi, uniprot_ids)},
                            error = function(e){0})
  
  if(!is.null(fasta_file)){fasta_list <- readRDS(fasta_file)
  fasta_list <- fasta_list[[ioi]][[1]]}else{
    #read a FASTA from uniprot
    #refer to alpha fold so FASTA is consistent
    fasta_list <- get_FASTA_fromalphafold(ioi_alphafold)
    
  }
  
  peptide_seq_list <- readRDS(peptide_seq_list_file)
  peptide_seq_list <- peptide_seq_list[[ioi]]
  peptide_indices <- tryCatch({get_peptide_numeric(fasta_list, peptide_seq_list)},
                              error = function(e){0})
  #retrieve from alphafold so it's consistent with the other visualizations in 3D
  
  interpro_options <- unique(interpro_ioi$interpro_description)
  
  meta_hmap <- matrix(nrow = nchar(fasta_list[[1]]), ncol = length(c("Amino acid residue", "Membership", interpro_options)))
  colnames(meta_hmap) <- c("Amino acid residue", "Membership", interpro_options)
  meta_hmap[,'Amino acid residue'] <- as.numeric(1:nchar(fasta_list[[1]]))
  
  #populate the heatmap
  for(i in as.numeric(meta_hmap[,'Amino acid residue'])){
    
    for(j in 1:nrow(interpro_ioi)){
      
      if(i >= interpro_ioi$interpro_start[j] & i <= interpro_ioi$interpro_end[j]){
        
        meta_hmap[meta_hmap[,'Amino acid residue'] == i,interpro_ioi$interpro_description[j]] <- interpro_ioi$interpro_description[j]
        
      }
      
    }
    
    for(k in 1:length(peptide_indices)){
      
      if(as.numeric(peptide_indices[[k]][["start_position"]]) <= i & 
         as.numeric(nchar(peptide_indices[[k]][["peptide"]]) + peptide_indices[[k]][["start_position"]]) >= i){
        
        if(!is.na(meta_hmap[,"Membership"][i]) & meta_hmap[,"Membership"][i] != peptide_indices[[k]][[3]]){
          meta_hmap[,"Membership"][i] <- paste0("Multiple")
        }else(
          meta_hmap[,"Membership"][i] <- peptide_indices[[k]][[3]]
        ) #end ifelse for membership discovery
        
        
        
      }
      
    }
    
  }
  
  
  #make sure it's numeric 
  meta_hmap <- as.data.frame(meta_hmap)
  meta_hmap[,'Amino acid residue'] <- as.numeric(meta_hmap[,'Amino acid residue'])
  #make color for multi mapping 
  membership_colors["Multiple"] <- "#494e57"
    
  metadata_annotation_obj <- HeatmapAnnotation(df = meta_hmap, na_col = "white", col = 
                                                 list(
                                                   "Membership" = membership_colors
                                                 ),
                                               which = "row")
  
  plot(metadata_annotation_obj)
  return(metadata_annotation_obj)
}



interpro_plot(ioi = "RASSF2", interpro_file = interpro_file, uniprot_ids = uniprot_ids,
              membership_colors = membership_colors, peptide_seq_list_file =  "~/Documents/githubspot/ibrutinib-cll/shiny_stable6/peptide_seq_list.RDS")


alphafold_plot("RASSF2", uniprot_ids = uniprot_ids, peptide_seq_list_file = c("~/Documents/githubspot/ibrutinib-cll/shiny_stable6/peptide_seq_list.RDS"), fasta_file =  NULL,membership_colors = c("1" = "#FF5376",
                                                                                                                                                                                                 "2" = "#72AFD9",
                                                                                                                                                                                                 "3" = "#E3D26F",
                                                                                                                                                                                                 "4" = "#A288E3",
                                                                                                                                                                                                 "5" = "#1B5299",
                                                                                                                                                                                                 "6" = "#68D8D6",
                                                                                                                                                                                                 "NA" = "#494e57"
))

interpro_plot(ioi = "GSK3B", interpro_file = interpro_file, uniprot_ids = uniprot_ids,
              membership_colors = membership_colors, peptide_seq_list_file =  "~/Documents/githubspot/ibrutinib-cll/shiny_stable6/peptide_seq_list.RDS")




interpro_plot(ioi = "ABL1", interpro_file = interpro_file, uniprot_ids = uniprot_ids,
              membership_colors = membership_colors, peptide_seq_list_file =  "~/Documents/githubspot/ibrutinib-cll/shiny_stable6/peptide_seq_list.RDS")


alphafold_plot("ABL1", uniprot_ids = uniprot_ids, peptide_seq_list_file = c("~/Documents/githubspot/ibrutinib-cll/shiny_stable6/peptide_seq_list.RDS"), fasta_file =  NULL,membership_colors = c("1" = "#FF5376",
                                                                                                                                                                                                   "2" = "#72AFD9",
                                                                                                                                                                                                   "3" = "#E3D26F",
                                                                                                                                                                                                   "4" = "#A288E3",
                                                                                                                                                                                                   "5" = "#1B5299",
                                                                                                                                                                                                   "6" = "#68D8D6",
                                                                                                                                                                                                   "NA" = "#494e57"
))

proteoforms$storage <- proteoforms$sample_name_machine
proteoforms$sample_name_machine <- "All samples"
plot_proteoform(ioi = "ABL1",
                e_set = proteoforms,
                x_col = "temperature",
                facet_col = "sample_split",
                hide_lines = TRUE,
                colors = membership_colors,
                add_splines = TRUE,
                line_col = 'Treatment') + theme_pubr()



